name: Automated Tagging and Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
      custom_version:
        description: 'Custom version (optional)'
        required: false
        type: string

env:
  PYTHON_VERSION: 3.11

jobs:
  determine-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      changelog: ${{ steps.changelog.outputs.changelog }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install version management tools
      run: |
        python -m pip install --upgrade pip
        pip install semver

    - name: Get current version
      id: current_version
      run: |
        if git describe --tags --abbrev=0 2>/dev/null; then
          CURRENT_VERSION=$(git describe --tags --abbrev=0)
        else
          CURRENT_VERSION="v0.0.0"
        fi
        echo "current_version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT

    - name: Determine next version
      id: version
      run: |
        python3 << 'EOF'
        import semver
        import os
        import sys

        current_version = "${{ steps.current_version.outputs.current_version }}"
        if current_version.startswith('v'):
            current_version = current_version[1:]

        # If no current version, start with 1.0.0
        if current_version == "0.0.0":
            current_version = "1.0.0"

        # Parse version
        try:
            version_info = semver.VersionInfo.parse(current_version)
        except:
            version_info = semver.VersionInfo(1, 0, 0)

        # Determine version type
        if "${{ github.event_name }}" == "workflow_dispatch":
            version_type = "${{ github.event.inputs.version_type }}"
            custom_version = "${{ github.event.inputs.custom_version }}"

            if custom_version:
                new_version = custom_version
            else:
                if version_type == "major":
                    new_version = str(version_info.bump_major())
                elif version_type == "minor":
                    new_version = str(version_info.bump_minor())
                elif version_type == "patch":
                    new_version = str(version_info.bump_patch())
                elif version_type == "prerelease":
                    new_version = str(version_info.bump_prerelease())
                else:
                    new_version = str(version_info.bump_patch())
        else:
            # Auto-determine based on commit messages
            import subprocess
            import re

            # Get commits since last tag
            try:
                commits = subprocess.check_output([
                    "git", "log", "--pretty=format:%s",
                    f"{current_version}..HEAD" if current_version != "1.0.0" else "HEAD"
                ], text=True).strip().split('\n')
            except:
                commits = []

            # Analyze commit messages
            has_breaking = any(re.search(r'BREAKING CHANGE|!:', commit) for commit in commits)
            has_feat = any(re.search(r'^feat(\([^)]+\))?:', commit) for commit in commits)
            has_fix = any(re.search(r'^fix(\([^)]+\))?:', commit) for commit in commits)

            if has_breaking:
                new_version = str(version_info.bump_major())
            elif has_feat:
                new_version = str(version_info.bump_minor())
            elif has_fix:
                new_version = str(version_info.bump_patch())
            else:
                new_version = str(version_info.bump_patch())

        print(f"version={new_version}")
        print(f"tag=v{new_version}")

        # Write to GitHub output
        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write(f"version={new_version}\n")
            f.write(f"tag=v{new_version}\n")
        EOF

    - name: Generate changelog
      id: changelog
      run: |
        python3 << 'EOF'
        import subprocess
        import re
        import os
        from datetime import datetime

        current_version = "${{ steps.current_version.outputs.current_version }}"
        new_version = "${{ steps.version.outputs.version }}"

        # Get commits since last tag
        try:
            if current_version and current_version != "v0.0.0":
                commits = subprocess.check_output([
                    "git", "log", "--pretty=format:%s", f"{current_version}..HEAD"
                ], text=True).strip().split('\n')
            else:
                commits = subprocess.check_output([
                    "git", "log", "--pretty=format:%s"
                ], text=True).strip().split('\n')
        except:
            commits = []

        # Categorize commits
        features = []
        fixes = []
        breaking = []
        other = []

        for commit in commits:
            if not commit.strip():
                continue

            if re.search(r'BREAKING CHANGE|!:', commit):
                breaking.append(commit)
            elif re.search(r'^feat(\([^)]+\))?:', commit):
                features.append(commit)
            elif re.search(r'^fix(\([^)]+\))?:', commit):
                fixes.append(commit)
            else:
                other.append(commit)

        # Generate changelog
        changelog = f"# Release v{new_version}\n\n"
        changelog += f"Released: {datetime.now().strftime('%Y-%m-%d')}\n\n"

        if breaking:
            changelog += "## Breaking Changes\n"
            for commit in breaking:
                changelog += f"- {commit}\n"
            changelog += "\n"

        if features:
            changelog += "## New Features\n"
            for commit in features:
                changelog += f"- {commit}\n"
            changelog += "\n"

        if fixes:
            changelog += "## Bug Fixes\n"
            for commit in fixes:
                changelog += f"- {commit}\n"
            changelog += "\n"

        if other:
            changelog += "## Other Changes\n"
            for commit in other:
                changelog += f"- {commit}\n"
            changelog += "\n"

        changelog += "## Full Changelog\n"
        changelog += f"**Full Changelog**: https://github.com/${{ github.repository }}/compare/{current_version}...v{new_version}\n"

        # Write changelog to file
        with open('CHANGELOG.md', 'w') as f:
            f.write(changelog)

        # Escape for GitHub output
        changelog_escaped = changelog.replace('\n', '\\n').replace('\r', '\\r')

        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write(f"changelog={changelog_escaped}\n")
        EOF

    - name: Upload changelog
      uses: actions/upload-artifact@v3
      with:
        name: changelog
        path: CHANGELOG.md

  test-and-coverage:
    needs: determine-version
    runs-on: ubuntu-latest
    if: needs.determine-version.outputs.version != ''
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov coverage
        pip install -e .[test]

    - name: Run tests with coverage
      run: |
        pytest --cov=src/open_accelerator --cov-report=xml --cov-fail-under=100 tests/

    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: OpenAccelerator-${{ needs.determine-version.outputs.tag }}

  create-tag:
    needs: [determine-version, test-and-coverage]
    runs-on: ubuntu-latest
    if: needs.determine-version.outputs.version != ''

    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Configure Git
      run: |
        git config user.name "LlamaFarms Team"
        git config user.email "team@llamafarms.ai"

    - name: Update version in files
      run: |
        NEW_VERSION="${{ needs.determine-version.outputs.version }}"

        # Update version in __init__.py
        sed -i "s/__version__ = .*/__version__ = \"${NEW_VERSION}\"/" src/open_accelerator/__init__.py

        # Update version in pyproject.toml
        sed -i "s/version = .*/version = \"${NEW_VERSION}\"/" pyproject.toml

        # Update version in package info
        find src/open_accelerator*.egg-info -name "PKG-INFO" -exec sed -i "s/Version: .*/Version: ${NEW_VERSION}/" {} \; 2>/dev/null || true

    - name: Commit version changes
      run: |
        git add -A
        git commit -m "chore: bump version to ${{ needs.determine-version.outputs.version }}" || true

    - name: Create and push tag
      run: |
        git tag -a "${{ needs.determine-version.outputs.tag }}" -m "Release ${{ needs.determine-version.outputs.tag }}"
        git push origin main
        git push origin "${{ needs.determine-version.outputs.tag }}"

  create-release:
    needs: [determine-version, create-tag]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ needs.determine-version.outputs.tag }}

    - name: Download changelog
      uses: actions/download-artifact@v3
      with:
        name: changelog

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.determine-version.outputs.tag }}
        name: OpenAccelerator ${{ needs.determine-version.outputs.tag }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: ${{ contains(needs.determine-version.outputs.version, '-') }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-publish:
    needs: [determine-version, create-tag, create-release, test-and-coverage]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ needs.determine-version.outputs.tag }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Publish to PyPI
      if: github.ref == 'refs/heads/main'
      uses: pypa/gh-action-pypi-publish@v1.8.10
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

  notify-completion:
    needs: [determine-version, create-tag, create-release, build-and-publish]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Send completion notification
      run: |
        echo "Release workflow completed!"
        echo "Version: ${{ needs.determine-version.outputs.version }}"
        echo "Tag: ${{ needs.determine-version.outputs.tag }}"
        echo "Status: ${{ job.status }}"
