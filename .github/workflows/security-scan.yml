name: Security Scanning and Compliance

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 3 * * 1'  # Weekly on Monday at 3 AM UTC
  workflow_dispatch:

env:
  PYTHON_VERSION: 3.11

jobs:
  dependency-check:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install safety pip-audit cyclonedx-bom

    - name: Run Safety check
      run: |
        safety check --json --output safety_report.json || true
        safety check --output safety_report.txt || true

    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=pip_audit_report.json || true
        pip-audit --output=pip_audit_report.txt || true

    - name: Generate SBOM
      run: |
        cyclonedx-py -o sbom.json

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: dependency-security-reports
        path: |
          safety_report.json
          safety_report.txt
          pip_audit_report.json
          pip_audit_report.txt
          sbom.json

  code-analysis:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install bandit semgrep

    - name: Run Bandit security linter
      run: |
        bandit -r src/ -f json -o bandit_report.json || true
        bandit -r src/ -f txt -o bandit_report.txt || true

    - name: Run Semgrep
      run: |
        semgrep --config=auto src/ --json --output=semgrep_report.json || true
        semgrep --config=auto src/ --output=semgrep_report.txt || true

    - name: Upload code analysis reports
      uses: actions/upload-artifact@v3
      with:
        name: code-analysis-reports
        path: |
          bandit_report.json
          bandit_report.txt
          semgrep_report.json
          semgrep_report.txt

  secret-scanning:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  container-security:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build -t openaccelerator:security-scan .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'openaccelerator:security-scan'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Docker Bench for Security
      run: |
        docker run --rm --net host --pid host --userns host --cap-add audit_control \
          -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
          -v /etc:/etc:ro \
          -v /usr/bin/containerd:/usr/bin/containerd:ro \
          -v /usr/bin/runc:/usr/bin/runc:ro \
          -v /usr/lib/systemd:/usr/lib/systemd:ro \
          -v /var/lib:/var/lib:ro \
          -v /var/run/docker.sock:/var/run/docker.sock:ro \
          docker/docker-bench-security > docker_bench_security.txt || true

    - name: Upload container security reports
      uses: actions/upload-artifact@v3
      with:
        name: container-security-reports
        path: |
          trivy-results.sarif
          docker_bench_security.txt

  medical-compliance:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run medical compliance checks
      run: |
        python scripts/medical_compliance_check.py \
          --output-format json \
          --output-file medical_compliance_report.json

    - name: Run HIPAA compliance validation
      run: |
        python scripts/hipaa_compliance_check.py \
          --output-format json \
          --output-file hipaa_compliance_report.json

    - name: Run FDA validation checks
      run: |
        python scripts/fda_validation_check.py \
          --output-format json \
          --output-file fda_validation_report.json

    - name: Upload medical compliance reports
      uses: actions/upload-artifact@v3
      with:
        name: medical-compliance-reports
        path: |
          medical_compliance_report.json
          hipaa_compliance_report.json
          fda_validation_report.json

  penetration-testing:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Start FastAPI server
      run: |
        python -m uvicorn src.open_accelerator.api.main:app --host 0.0.0.0 --port 8000 &
        sleep 10

    - name: Run API security tests
      run: |
        python tests/security/test_api_security.py \
          --target-url http://localhost:8000 \
          --output-file api_security_report.json

    - name: Run authentication tests
      run: |
        python tests/security/test_auth_security.py \
          --target-url http://localhost:8000 \
          --output-file auth_security_report.json

    - name: Run input validation tests
      run: |
        python tests/security/test_input_validation.py \
          --target-url http://localhost:8000 \
          --output-file input_validation_report.json

    - name: Upload penetration test reports
      uses: actions/upload-artifact@v3
      with:
        name: penetration-test-reports
        path: |
          api_security_report.json
          auth_security_report.json
          input_validation_report.json

  license-compliance:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install pip-licenses licensecheck

    - name: Generate license report
      run: |
        pip-licenses --format=json --output-file licenses.json
        pip-licenses --format=html --output-file licenses.html

    - name: Check license compatibility
      run: |
        licensecheck --zero

    - name: Upload license reports
      uses: actions/upload-artifact@v3
      with:
        name: license-reports
        path: |
          licenses.json
          licenses.html

  generate-security-report:
    runs-on: ubuntu-latest
    needs: [dependency-check, code-analysis, secret-scanning, container-security, medical-compliance, penetration-testing, license-compliance]
    if: always()

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pandas jinja2 matplotlib

    - name: Download all security artifacts
      uses: actions/download-artifact@v3
      with:
        path: security-artifacts/

    - name: Generate comprehensive security report
      run: |
        python scripts/generate_security_report.py \
          --artifacts-dir security-artifacts/ \
          --output-dir security-report/ \
          --format html

    - name: Upload comprehensive security report
      uses: actions/upload-artifact@v3
      with:
        name: comprehensive-security-report
        path: security-report/

    - name: Deploy security report
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./security-report
        destination_dir: security

    - name: Create security issue on failure
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'Security Scan Failure - ' + new Date().toISOString().split('T')[0],
            body: 'Security scanning workflow failed. Please review the results and address any vulnerabilities found.',
            labels: ['security', 'bug', 'high-priority']
          });
