name: Performance Testing and Benchmarks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  workflow_dispatch:

env:
  PYTHON_VERSION: 3.11

jobs:
  benchmark-core:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-suite:
          - systolic_array
          - memory_hierarchy
          - power_management
          - medical_workflows
          - ai_agents

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,benchmark]"
        pip install pytest-benchmark pytest-cov pytest-xdist

    - name: Run benchmarks
      run: |
        pytest tests/benchmark/test_${{ matrix.test-suite }}_benchmark.py \
          --benchmark-only \
          --benchmark-json=benchmark_${{ matrix.test-suite }}.json \
          --benchmark-sort=mean \
          --benchmark-columns=min,max,mean,stddev,median,iqr,outliers,ops,rounds

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results-${{ matrix.test-suite }}
        path: benchmark_${{ matrix.test-suite }}.json

  performance-regression:
    runs-on: ubuntu-latest
    needs: benchmark-core

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,benchmark]"
        pip install pytest-benchmark pandas matplotlib

    - name: Download benchmark results
      uses: actions/download-artifact@v3
      with:
        path: benchmark-results/

    - name: Analyze performance regression
      run: |
        python scripts/analyze_performance_regression.py \
          --benchmark-dir benchmark-results/ \
          --output-report performance_regression_report.md \
          --threshold 0.05

    - name: Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: performance_regression_report.md

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('performance_regression_report.md', 'utf8');

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## Performance Regression Report\n\n${report}`
          });

  memory-profiling:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install memory-profiler psutil

    - name: Run memory profiling
      run: |
        python scripts/memory_profiler.py \
          --test-scenarios all \
          --output-format json \
          --output-file memory_profile.json

    - name: Generate memory report
      run: |
        python scripts/generate_memory_report.py \
          --input memory_profile.json \
          --output memory_report.md

    - name: Upload memory report
      uses: actions/upload-artifact@v3
      with:
        name: memory-report
        path: memory_report.md

  scalability-testing:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        scale-factor: [1, 2, 4, 8, 16]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run scalability tests
      run: |
        python tests/scalability/test_array_scaling.py \
          --scale-factor ${{ matrix.scale-factor }} \
          --output-json scalability_${{ matrix.scale-factor }}.json

    - name: Upload scalability results
      uses: actions/upload-artifact@v3
      with:
        name: scalability-results-${{ matrix.scale-factor }}
        path: scalability_${{ matrix.scale-factor }}.json

  stress-testing:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run stress tests
      run: |
        python tests/stress/test_long_running_simulation.py \
          --duration 1800 \
          --output-json stress_test_results.json

    - name: Upload stress test results
      uses: actions/upload-artifact@v3
      with:
        name: stress-test-results
        path: stress_test_results.json

  generate-performance-report:
    runs-on: ubuntu-latest
    needs: [benchmark-core, performance-regression, memory-profiling, scalability-testing, stress-testing]
    if: always()

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pandas matplotlib jinja2

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: performance-artifacts/

    - name: Generate comprehensive performance report
      run: |
        python scripts/generate_performance_report.py \
          --artifacts-dir performance-artifacts/ \
          --output-dir performance-report/ \
          --format html

    - name: Upload comprehensive report
      uses: actions/upload-artifact@v3
      with:
        name: comprehensive-performance-report
        path: performance-report/

    - name: Deploy performance report
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./performance-report
        destination_dir: performance
