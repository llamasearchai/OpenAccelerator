[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "open-accelerator"
version = "1.0.2"
authors = [
    {name = "Nik Jois", email = "nikjois@llamasearch.ai"},
]
description = "High-performance systolic array computing framework with AI agents and medical compliance."
readme = "README.md"
license = "MIT"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Healthcare Industry",
    "Intended Audience :: Information Technology",

    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Hardware",
    "Topic :: System :: Hardware :: Hardware Drivers",
    "Topic :: System :: Emulators",
    "Topic :: Software Development :: Testing",
    "Environment :: Console",
    "Environment :: Web Environment",
    "Framework :: FastAPI",
    "Framework :: Pydantic",
    "Natural Language :: English",
    "Typing :: Typed",
]
keywords = [
    "machine-learning",
    "accelerator",
    "simulator",
    "medical-ai",
    "systolic-array",
    "hardware-modeling",
    "performance-analysis",
    "ai-agents",
    "openai",
    "fastapi",
    "docker",
    "medical-imaging",
    "hipaa",
    "fda-validation",
]
dependencies = [
    # Core dependencies
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    "pandas>=1.3.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "plotly>=5.0.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "typer>=0.9.0",
    "rich>=13.0.0",
    "click>=8.0.0",

    # FastAPI and async
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "starlette>=0.27.0",
    "httpx>=0.25.0",
    "websockets>=12.0",

    # AI and ML
    "openai>=1.0.0",
    "tiktoken>=0.5.0",
    "transformers>=4.30.0",
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "scikit-learn>=1.3.0",

    # Data processing
    "pillow>=10.0.0",
    "pydicom>=2.4.0",
    "nibabel>=5.2.0",
    "h5py>=3.8.0",
    "zarr>=2.14.0",

    # Configuration and utilities
    "pyyaml>=6.0",
    "toml>=0.10.2",
    "jinja2>=3.1.0",
    "psutil>=5.9.0",
    "tqdm>=4.65.0",
    "colorama>=0.4.6",
    "termcolor>=2.3.0",

    # Logging and monitoring
    "structlog>=23.0.0",
    "prometheus-client>=0.17.0",
    "python-json-logger>=2.0.0",

    # Medical and compliance
    "cryptography>=41.0.0",
    "bcrypt>=4.0.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",

    # Performance and profiling
    "line-profiler>=4.0.0",
    "memory-profiler>=0.61.0",
    "py-spy>=0.3.14",

    # Jupyter and notebooks
    "jupyter>=1.0.0",
    "ipywidgets>=8.0.0",
    "jupyter-book>=0.15.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "pytest-mock>=3.11.0",
    "pytest-asyncio>=0.21.0",
    "pytest-benchmark>=4.0.0",
    "pytest-timeout>=2.1.0",
    "pytest-html>=4.0.0",
    "pytest-json-report>=1.5.0",
    "hypothesis>=6.82.0",
    "factory-boy>=3.3.0",
    "responses>=0.23.0",
    "httpx>=0.25.0",
    "respx>=0.20.0",

    # Code quality
    "ruff>=0.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
    "pylint>=2.17.0",
    "flake8>=6.0.0",
    "bandit>=1.7.5",

    # Documentation dependencies
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "sphinx-click>=5.0.0",
    "myst-parser>=2.0.0",
    "sphinx-copybutton>=0.5.2",
    "sphinx-tabs>=3.4.0",
    "sphinx-autobuild>=2021.3.14",
    "sphinx-design>=0.6.0",

    # Development tools
    "tox>=4.11.0",
    "build>=0.10.0",
    "twine>=4.0.0",
    "wheel>=0.41.0",
    "setuptools>=68.0.0",
    "bumpver>=2023.1126",
    "commitizen>=3.10.0",
    "pre-commit-hooks>=4.4.0",
]

docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "sphinx-click>=5.0.0",
    "myst-parser>=2.0.0",
    "sphinx-copybutton>=0.5.2",
    "sphinx-tabs>=3.4.0",
    "sphinx-autobuild>=2021.3.14",
    "jupyter-book>=0.15.0",
    "myst-nb>=1.0.0",
    "sphinx-design>=0.5.0",
    "docutils>=0.17.0",
    "myst-parser[linkify]>=2.0.0",
    "linkify-it-py>=2.0.0",
]

benchmark = [
    "pytest-benchmark>=4.0.0",
    "memory-profiler>=0.61.0",
    "py-spy>=0.3.14",
    "line-profiler>=4.0.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "plotly>=5.0.0",
]

security = [
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "semgrep>=1.40.0",
    "cryptography>=41.0.0",
    "bcrypt>=4.0.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
]

medical = [
    "pydicom>=2.4.0",
    "SimpleITK>=2.2.0",
    "nibabel>=5.1.0",
    "vtk>=9.2.0",
    "itk>=5.3.0",
    "opencv-python>=4.8.0",
    "medpy>=0.4.0",
    "dicom2nifti>=2.4.0",
    "pynetdicom>=2.0.0",
    "gdcm>=1.0.0",
    "deid>=0.3.0",
    "anonymizedf>=1.0.0",
    "cryptography>=41.0.0",
    "bcrypt>=4.0.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
]

all = [
    "open-accelerator[dev,docs,benchmark,security,medical]",
]

[project.urls]
"Homepage" = "https://github.com/nikjois/OpenAccelerator"
"Documentation" = "https://nikjois.github.io/OpenAccelerator"
"Repository" = "https://github.com/nikjois/OpenAccelerator"
"Bug Tracker" = "https://github.com/nikjois/OpenAccelerator/issues"
"Changelog" = "https://github.com/nikjois/OpenAccelerator/blob/main/CHANGELOG.md"
"PyPI" = "https://pypi.org/project/open-accelerator"
"Discussions" = "https://github.com/nikjois/OpenAccelerator/discussions"
"Funding" = "https://github.com/sponsors/nikjois"

[project.scripts]
openaccel = "open_accelerator.cli.commands:main"
openaccel-serve = "open_accelerator.api.main:serve"
openaccel-benchmark = "open_accelerator.benchmarks.runner:main"
openaccel-medical = "open_accelerator.medical.cli:main"

[tool.setuptools.packages.find]
where = ["src"]
include = ["open_accelerator*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
open_accelerator = [
    "*.yaml",
    "*.yml",
    "*.json",
    "*.toml",
    "*.txt",
    "*.md",
    "data/*",
    "config/*",
    "templates/*",
    "static/*",
]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
^/(
  (
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | docs/_build
  )/
)
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["open_accelerator"]
known_third_party = ["numpy", "scipy", "matplotlib", "pandas", "sklearn", "torch", "transformers", "openai", "fastapi", "pydantic", "typer", "rich", "click"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "torchvision.*",
    "transformers.*",
    "openai.*",
    "tiktoken.*",
    "pydicom.*",
    "SimpleITK.*",
    "nibabel.*",
    "vtk.*",
    "itk.*",
    "cv2.*",
    "medpy.*",
    "dicom2nifti.*",
    "pynetdicom.*",
    "gdcm.*",
    "deid.*",
    "anonymizedf.*",
    "dspy.*",
]
ignore_missing_imports = true

[tool.ruff]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
line-length = 88
target-version = "py38"

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["E501"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--tb=short",
    "-ra",
    "--cov=open_accelerator",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=50",
    "--numprocesses=auto",
    "--dist=loadgroup",
]
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "benchmark: marks tests as benchmark tests",
    "medical: marks tests as medical AI tests",
    "security: marks tests as security tests",
    "performance: marks tests as performance tests",
]

[tool.coverage.run]
source = ["src"]
branch = true
parallel = true
omit = [
    "*/tests/*",
    "*/test_*",
    # Exclude large AI and medical packages which are integration-tested separately
    "src/open_accelerator/ai/*",
    "src/open_accelerator/medical/*",
    # Exclude heavy subsystems not exercised in unit tests
    "src/open_accelerator/core/power*",
    "src/open_accelerator/core/reliability*",
    "src/open_accelerator/core/security*",
    "src/open_accelerator/core/power_management*",
    "src/open_accelerator/analysis/medical_analysis.py",
    "src/open_accelerator/cli/*",
    # Preserve standard omissions
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "no cov",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if False:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.bandit]
exclude_dirs = ["tests", "docs", "examples"]
skips = ["B101", "B601"]

[tool.commitizen]
name = "cz_conventional_commits"
version = "1.0.0"
tag_format = "v$version"
version_files = [
    "pyproject.toml:version",
    "src/open_accelerator/__init__.py:__version__",
]

[tool.bumpver]
current_version = "1.0.0"
version_pattern = "MAJOR.MINOR.PATCH"
commit_message = "bump version {old_version} -> {new_version}"
commit = true
tag = true
push = true

[tool.bumpver.file_patterns]
"pyproject.toml" = [
    'version = "{version}"',
]
"src/open_accelerator/__init__.py" = [
    '__version__ = "{version}"',
]

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py38, py39, py310, py311, py312, lint, docs, security
isolated_build = true

[testenv]
deps =
    pytest>=7.4.0
    pytest-cov>=4.1.0
    pytest-xdist>=3.3.0
    pytest-mock>=3.11.0
    pytest-asyncio>=0.21.0
    hypothesis>=6.82.0
commands =
    pytest {posargs}

[testenv:lint]
deps =
    ruff>=0.1.0
    black>=23.0.0
    isort>=5.12.0
    mypy>=1.5.0
    pylint>=2.17.0
    flake8>=6.0.0
commands =
    ruff check src tests
    black --check src tests
    isort --check-only src tests
    mypy src
    pylint src

[testenv:docs]
deps =
    sphinx>=7.0.0
    sphinx-rtd-theme>=1.3.0
    sphinx-autodoc-typehints>=1.24.0
    sphinx-click>=5.0.0
    myst-parser>=2.0.0
    sphinx-copybutton>=0.5.2
    sphinx-design>=0.6.0
commands =
    sphinx-build -b html docs docs/_build/html

[testenv:security]
deps =
    bandit>=1.7.5
    safety>=2.3.0
commands =
    bandit -r src
    safety check
"""
